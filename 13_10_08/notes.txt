PHP Superglobals
$GLOBALS
	SuperGlobal.  Accessible from ALL scopes. 
$_SERVER
	Holds the details of the webserver.  Many prepopulated fields.  Should check the documentation for them.
$_GET
	Holds only the variables from a GET request
$_POST
	Holds only the variables from a POST request
$_COOKIE
	Holds the variables which are in the client-side cookie.
	From the PHP.net comments: The value of $_COOKIE is determined by the content of cookies received in the user agent's request.  "If you set a cookie (ie send it to the browser), it won't be sent back until the next request and so the data won't be present in $_COOKIE."
		So...I can use setcookie() [see below]
$_FILES
$_ENV
$_REQUEST
	Super set of $_GET, $_POST, and $_COOKIE.  Not really a great choice, since it obscures the workings/architecture of the website.
$_SESSION

htmlentities()
	PHP function to escape entirely to HTML equivalents.  For instance, angle brackets
isset($var)
	PHP function to check a function to see if it is null (true if exists and not null)
setcookie()
	sets a value in the client side cookie.  Must be before any HTML response.
	
Javascript
function
	reserved keyword, translates to a function-type object.
	functions can be created in different ways:
		var x = function(a,b) {return a + b;} 			//Creates an object and assigns it to the variable x.  Creates object at run-time.  This means if we reference before creation in the script, we will throw an error.
		function x(a,b) {return a + b;}					//Creates an object and assigns it to the variable x.  Creates object at parse-time.
		var x = new Function("a","b", "return a+b;");	//This looks terrible.  Why would I do this?  Note- this definitely creates an object of type Function
		I _think_ the latter two options are functionally the same, creating a named function object, whereas the first creates an unnamed function.  This means we can only access "this.name" for the 2nd and 3rd definitions 
	fun note: can define function with empty parameter list, then pass it arguments, which get stored in "this.arguments" for the function
